// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trizen.DataLayer;

#nullable disable

namespace Trizen.DataLayer.Migrations
{
    [DbContext(typeof(TrizenDbContext))]
    [Migration("20250331142019_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Trizen.DataLayer.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GeographicalLocation")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationTypeId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.DestinationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("DestinationTypes");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PassengerUserId")
                        .HasColumnType("int");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PassengerUserId");

                    b.HasIndex("TravelId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Personality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Personalities");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.PersonalityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PersonalityId");

                    b.ToTable("PersonalityCategories");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.PersonalityDestinationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationTypeId");

                    b.HasIndex("PersonalityId");

                    b.ToTable("PersonalityDestinationTypes");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.PersonalityTourType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonalityId")
                        .HasColumnType("int");

                    b.Property<int>("TourTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonalityId");

                    b.HasIndex("TourTypeId");

                    b.ToTable("PersonalityTourTypes");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("int");

                    b.Property<int>("MaximumPassenger")
                        .HasColumnType("int");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SleepNightsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TourTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("TourTypeId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.TourCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TourId");

                    b.ToTable("TourCategories");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.TourObserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ObserveType")
                        .HasColumnType("int");

                    b.Property<int>("ObservedTourId")
                        .HasColumnType("int");

                    b.Property<int>("ObserverUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObservedTourId");

                    b.HasIndex("ObserverUserId");

                    b.ToTable("TourObserves");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.TourType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("TourTypes");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Travel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TraveledTourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TraveledTourId");

                    b.HasIndex("UserId");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageProfile")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PersonalityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("WalletAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PersonalityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Destination", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.DestinationType", "DestinationType")
                        .WithMany()
                        .HasForeignKey("DestinationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationType");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Passenger", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.User", "User")
                        .WithMany("Passenger")
                        .HasForeignKey("PassengerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.Travel", null)
                        .WithMany("Passengers")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.PersonalityCategory", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.Personality", "Personality")
                        .WithMany("PersonalityCategories")
                        .HasForeignKey("PersonalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Personality");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.PersonalityDestinationType", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.DestinationType", "DestinationType")
                        .WithMany()
                        .HasForeignKey("DestinationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.Personality", "Personality")
                        .WithMany("PersonalityDestinationTypes")
                        .HasForeignKey("PersonalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationType");

                    b.Navigation("Personality");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.PersonalityTourType", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.Personality", "Personality")
                        .WithMany("PersonalityTourTypes")
                        .HasForeignKey("PersonalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.TourType", "TourType")
                        .WithMany()
                        .HasForeignKey("TourTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personality");

                    b.Navigation("TourType");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Tour", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.TourType", "TourType")
                        .WithMany()
                        .HasForeignKey("TourTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("TourType");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.TourCategory", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.Tour", "Tour")
                        .WithMany("TourCategories")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.TourObserve", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.Tour", "Tour")
                        .WithMany("TourObserves")
                        .HasForeignKey("ObservedTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.User", "User")
                        .WithMany("TourObserve")
                        .HasForeignKey("ObserverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Travel", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.Tour", "Tour")
                        .WithMany("Travels")
                        .HasForeignKey("TraveledTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trizen.DataLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.User", b =>
                {
                    b.HasOne("Trizen.DataLayer.Entities.Personality", "Personality")
                        .WithMany()
                        .HasForeignKey("PersonalityId");

                    b.Navigation("Personality");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Personality", b =>
                {
                    b.Navigation("PersonalityCategories");

                    b.Navigation("PersonalityDestinationTypes");

                    b.Navigation("PersonalityTourTypes");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Tour", b =>
                {
                    b.Navigation("TourCategories");

                    b.Navigation("TourObserves");

                    b.Navigation("Travels");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.Travel", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("Trizen.DataLayer.Entities.User", b =>
                {
                    b.Navigation("Passenger");

                    b.Navigation("TourObserve");
                });
#pragma warning restore 612, 618
        }
    }
}
