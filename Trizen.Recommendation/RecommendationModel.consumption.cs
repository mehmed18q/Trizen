// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
namespace Trizen_Recommendation
{
    public partial class RecommendationModel
    {
        /// <summary>
        /// model input class for RecommendationModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(2)]
            [ColumnName(@"UserId")]
            public float UserId { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"TourId")]
            public float TourId { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for RecommendationModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"UserId")]
            public float UserId { get; set; }

            [ColumnName(@"TourId")]
            public float TourId { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        private static readonly string MLNetModelPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "RecommendationModel.mlnet");
        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new(CreatePredictEngine, true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            MLContext mlContext = new();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out DataViewSchema? _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            PredictionEngine<ModelInput, ModelOutput> predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
