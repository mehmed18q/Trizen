// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using System.Data.SqlClient;

namespace Trizen_Recommendation
{
    public partial class RecommendationModel
    {
        public const string RetrainConnectionString = @"Data Source=.;Initial Catalog=TrizenDB;Integrated Security=True;Trust Server Certificate=True";
        public const string RetrainCommandString = @"SELECT CAST([UserId] as REAL), CAST([TourId] as REAL), CAST([Score] as REAL) FROM [dbo].[SuggestedTours]";

        /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        public static void Train(string outputModelPath, string connectionString = RetrainConnectionString, string commandText = RetrainCommandString)
        {
            MLContext mlContext = new();

            IDataView data = LoadIDataViewFromDatabase(mlContext, connectionString, commandText);
            ITransformer model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a database source.For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromDatabase(MLContext mlContext, string connectionString, string commandText)
        {
            DatabaseLoader loader = mlContext.Data.CreateDatabaseLoader<ModelInput>();
            DatabaseSource dbSource = new(SqlClientFactory.Instance, connectionString, commandText);

            return loader.Load(dbSource);
        }

        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using FileStream fs = File.Create(modelSavePath);
            mlContext.Model.Save(model, dataViewSchema, fs);
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            IEstimator<ITransformer> pipeline = BuildPipeline(mlContext);
            ITransformer model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            EstimatorChain<Microsoft.ML.Transforms.KeyToValueMappingTransformer> pipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: @"TourId", inputColumnName: @"TourId", addKeyValueAnnotationsAsText: false)
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: @"UserId", inputColumnName: @"UserId", addKeyValueAnnotationsAsText: false))
                                    .Append(mlContext.Recommendation().Trainers.MatrixFactorization(new MatrixFactorizationTrainer.Options() { LabelColumnName = @"Score", MatrixColumnIndexColumnName = @"UserId", MatrixRowIndexColumnName = @"TourId", ApproximationRank = 16, LearningRate = 0.25258769338967507, NumberOfIterations = 154, Quiet = true }))
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: @"UserId", inputColumnName: @"UserId"))
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: @"TourId", inputColumnName: @"TourId"));

            return pipeline;
        }
    }
}
